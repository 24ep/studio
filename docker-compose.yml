version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DATABASE_URL: "${DATABASE_URL}"
        NEXTAUTH_URL: "${NEXTAUTH_URL}"
        NEXTAUTH_SECRET: "${NEXTAUTH_SECRET}"
        AZURE_AD_CLIENT_ID: "${AZURE_AD_CLIENT_ID}"
        AZURE_AD_CLIENT_SECRET: "${AZURE_AD_CLIENT_SECRET}"
        AZURE_AD_TENANT_ID: "${AZURE_AD_TENANT_ID}"
        GOOGLE_API_KEY: "${GOOGLE_API_KEY}"
        NEXT_PUBLIC_GOOGLE_FONTS_API_KEY: "${NEXT_PUBLIC_GOOGLE_FONTS_API_KEY}"
    ports:
      - "${APP_PORT}:9846"
    # For production deployments, you typically want the application code to be self-contained
    # within the Docker image. The volume mount `.:/app` is primarily for local development to
    # reflect code changes without rebuilding the image. It's commented out for production-like behavior.
    # If this mount is active in a production-like environment (e.g., Portainer deploying from an image
    # or a CI/CD pipeline), and the host path "." does not contain your application code (including package.json),
    # it will overwrite the files copied into the image, leading to "package.json not found" errors.
    # volumes:
    #   - .:/app # Ensure this is commented out or removed for production deployments where the image is self-contained.
    #
    # The named volumes below are generally fine and can be useful for persisting
    # node_modules and the .next build cache across container restarts, potentially
    # speeding up subsequent starts if the underlying image hasn't changed significantly.
    # volumes:
      # - app_node_modules:/app/node_modules
      # - app_next:/app/.next
    environment:
      DATABASE_URL: ${DATABASE_URL}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_PORT: ${MINIO_PORT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      MINIO_USE_SSL: ${MINIO_USE_SSL}
      MINIO_PUBLIC_BASE_URL: ${MINIO_PUBLIC_BASE_URL}
      REDIS_URL: ${REDIS_URL}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      # Azure AD Configuration (Optional - set these only if you want to use Azure AD SSO)
      AZURE_AD_CLIENT_ID: ${AZURE_AD_CLIENT_ID}
      AZURE_AD_CLIENT_SECRET: ${AZURE_AD_CLIENT_SECRET}
      AZURE_AD_TENANT_ID: ${AZURE_AD_TENANT_ID}
      # Public Azure AD variables for client-side detection (Optional)
      NEXT_PUBLIC_AZURE_AD_CLIENT_ID: ${NEXT_PUBLIC_AZURE_AD_CLIENT_ID}
      NEXT_PUBLIC_AZURE_AD_TENANT_ID: ${NEXT_PUBLIC_AZURE_AD_TENANT_ID}
      # N8N_RESUME_WEBHOOK_URL: https://ncc-n8n.qsncc.com/webhook/a19157d8-0fdb-44b0-860e-291e52896696
      # N8N_GENERIC_PDF_WEBHOOK_URL: https://ncc-n8n.qsncc.com/webhook/a19157d8-0fdb-44b0-860e-291e52896696
      N8N_RESUME_WEBHOOK_URL: ${N8N_RESUME_WEBHOOK_URL}
      N8N_GENERIC_PDF_WEBHOOK_URL: ${N8N_GENERIC_PDF_WEBHOOK_URL}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      NEXT_PUBLIC_GOOGLE_FONTS_API_KEY: ${NEXT_PUBLIC_GOOGLE_FONTS_API_KEY}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      postgres:
        condition: service_started
      minio:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped
    # The command to run the application is typically defined in the Dockerfile's CMD instruction.
    # For Next.js, this is often `npm run start` (which runs `next start`).
    # You can override it here if needed, but it's usually better to keep it in the Dockerfile.
    command: sh -c "until nc -z postgres ${POSTGRES_PORT}; do echo Waiting for Postgres...; sleep 2; done; until nc -z minio ${MINIO_PORT}; do echo Waiting for MinIO...; sleep 2; done; until nc -z redis ${REDIS_PORT}; do echo Waiting for Redis...; sleep 2; done; npx prisma migrate deploy && npx prisma db seed && npm start"

  postgres:
    image: postgres:14-alpine
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      # Ensure proper initialization
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount the initialization script from root directory
      # PostgreSQL will execute all .sql and .sh files found in /docker-entrypoint-initdb.d/ on first startup
      # when the postgres_data volume is empty or being newly created.
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    ports:
      - "${MINIO_API_PORT}:9000" # MinIO API port
      - "${MINIO_CONSOLE_PORT}:9001" # MinIO Console port
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_SERVER_URL: http://localhost:9000
      MINIO_BROWSER_REDIRECT_URL: http://localhost:${MINIO_CONSOLE_PORT}
    command: server /data --console-address ":9001" --address ":9000"
    volumes:
      - minio_data:/data
    restart: unless-stopped

  redis:
    image: redis:alpine
    ports:
      - "${REDIS_EXTERNAL_PORT}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  upload-queue-processor:
    build:
      context: .
      dockerfile: Dockerfile
    command: sh -c "until nc -z postgres ${POSTGRES_PORT}; do echo Waiting for Postgres...; sleep 2; done; until nc -z minio ${MINIO_PORT}; do echo Waiting for MinIO...; sleep 2; done; until nc -z redis ${REDIS_PORT}; do echo Waiting for Redis...; sleep 2; done; node process-upload-queue.js"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_PORT: ${MINIO_PORT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      MINIO_USE_SSL: ${MINIO_USE_SSL}
      MINIO_PUBLIC_BASE_URL: ${MINIO_PUBLIC_BASE_URL}
      REDIS_URL: ${REDIS_URL}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      AZURE_AD_CLIENT_ID: ${AZURE_AD_CLIENT_ID}
      AZURE_AD_CLIENT_SECRET: ${AZURE_AD_CLIENT_SECRET}
      AZURE_AD_TENANT_ID: ${AZURE_AD_TENANT_ID}
      NEXT_PUBLIC_AZURE_AD_CLIENT_ID: ${NEXT_PUBLIC_AZURE_AD_CLIENT_ID}
      NEXT_PUBLIC_AZURE_AD_TENANT_ID: ${NEXT_PUBLIC_AZURE_AD_TENANT_ID}
      N8N_RESUME_WEBHOOK_URL: ${N8N_RESUME_WEBHOOK_URL}
      N8N_GENERIC_PDF_WEBHOOK_URL: ${N8N_GENERIC_PDF_WEBHOOK_URL}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      NEXT_PUBLIC_GOOGLE_FONTS_API_KEY: ${NEXT_PUBLIC_GOOGLE_FONTS_API_KEY}
      NODE_ENV: ${NODE_ENV}
      PROCESSOR_INTERVAL_MS: ${PROCESSOR_INTERVAL_MS}
      PROCESSOR_URL: ${PROCESSOR_URL}
    depends_on:
      app:
        condition: service_started
      postgres:
        condition: service_started
      minio:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped

volumes:
  postgres_data:
  minio_data:
  redis_data:
  # app_node_modules:
  # app_next:
