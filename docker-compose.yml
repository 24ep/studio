version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DATABASE_URL: "postgresql://devuser:devpassword@postgres:5432/canditrack_db"
        NEXTAUTH_URL: "http://10.0.10.57:9846"
        NEXTAUTH_SECRET: "pMQcOKGO5zj/IDZxnu5ghHNLpmDc8+Ex+/qzieOM+zo="
        AZURE_AD_CLIENT_ID: "${AZURE_AD_CLIENT_ID:-your_azure_ad_application_client_id}"
        AZURE_AD_CLIENT_SECRET: "${AZURE_AD_CLIENT_SECRET:-your_azure_ad_client_secret_value}"
        AZURE_AD_TENANT_ID: "${AZURE_AD_TENANT_ID:-your_azure_ad_directory_tenant_id}"
        GOOGLE_API_KEY: "AIzaSyDM4TTZmwef-A3TOB4KND_XVxtXtDvZlRs"
        NEXT_PUBLIC_GOOGLE_FONTS_API_KEY: "AIzaSyAEslELPZLJBUfiKiNwsyXax0XezkQA-20"
    ports:
      - "9846:9846"
    # For production deployments, you typically want the application code to be self-contained
    # within the Docker image. The volume mount `.:/app` is primarily for local development to
    # reflect code changes without rebuilding the image. It's commented out for production-like behavior.
    # If this mount is active in a production-like environment (e.g., Portainer deploying from an image
    # or a CI/CD pipeline), and the host path "." does not contain your application code (including package.json),
    # it will overwrite the files copied into the image, leading to "package.json not found" errors.
    # volumes:
    #   - .:/app # Ensure this is commented out or removed for production deployments where the image is self-contained.
    #
    # The named volumes below are generally fine and can be useful for persisting
    # node_modules and the .next build cache across container restarts, potentially
    # speeding up subsequent starts if the underlying image hasn't changed significantly.
    # volumes:
      # - app_node_modules:/app/node_modules
      # - app_next:/app/.next
    environment:
      DATABASE_URL: postgresql://devuser:devpassword@postgres:5432/canditrack_db
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minio_secret_password
      MINIO_BUCKET_NAME: canditrack-resumes
      MINIO_USE_SSL: false
      MINIO_PUBLIC_BASE_URL: http://10.0.10.57:9847
      REDIS_URL: redis://redis:6379
      NEXTAUTH_URL: http://10.0.10.57:9846
      NEXTAUTH_SECRET: pMQcOKGO5zj/IDZxnu5ghHNLpmDc8+Ex+/qzieOM+zo=
      # Azure AD Configuration (Optional - set these only if you want to use Azure AD SSO)
      AZURE_AD_CLIENT_ID: ${AZURE_AD_CLIENT_ID:-your_azure_ad_application_client_id}
      AZURE_AD_CLIENT_SECRET: ${AZURE_AD_CLIENT_SECRET:-your_azure_ad_client_secret_value}
      AZURE_AD_TENANT_ID: ${AZURE_AD_TENANT_ID:-your_azure_ad_directory_tenant_id}
      # Public Azure AD variables for client-side detection (Optional)
      NEXT_PUBLIC_AZURE_AD_CLIENT_ID: ${AZURE_AD_CLIENT_ID:-}
      NEXT_PUBLIC_AZURE_AD_TENANT_ID: ${AZURE_AD_TENANT_ID:-}
      N8N_RESUME_WEBHOOK_URL: https://ncc-n8n.qsncc.com/webhook/a19157d8-0fdb-44b0-860e-291e52896696
      N8N_GENERIC_PDF_WEBHOOK_URL: https://ncc-n8n.qsncc.com/webhook/a19157d8-0fdb-44b0-860e-291e52896696
      GOOGLE_API_KEY: AIzaSyDM4TTZmwef-A3TOB4KND_XVxtXtDvZlRs
      NEXT_PUBLIC_GOOGLE_FONTS_API_KEY: AIzaSyAEslELPZLJBUfiKiNwsyXax0XezkQA-20
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    # The command to run the application is typically defined in the Dockerfile's CMD instruction.
    # For Next.js, this is often `npm run start` (which runs `next start`).
    # You can override it here if needed, but it's usually better to keep it in the Dockerfile.
    # command: ["npm", "run", "start"]

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpassword
      POSTGRES_DB: canditrack_db
      # Ensure proper initialization
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount the initialization script from root directory
      # PostgreSQL will execute all .sql and .sh files found in /docker-entrypoint-initdb.d/ on first startup
      # when the postgres_data volume is empty or being newly created.
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d canditrack_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  minio:
    image: minio/minio:latest
    ports:
      - "9847:9000" # MinIO API port
      - "9848:9001" # MinIO Console port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minio_secret_password
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 40s

  redis:
    image: redis:alpine
    ports:
      - "9849:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

volumes:
  postgres_data:
  minio_data:
  redis_data:
  # app_node_modules:
  # app_next:
