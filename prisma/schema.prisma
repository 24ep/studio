// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid()) @db.Uuid
  name              String
  email             String   @unique
  password          String
  role              String
  avatarUrl         String?
  image             String?
  dataAiHint        String?
  modulePermissions String[] @default([])
  authenticationMethod String? @default("basic") @map("authentication_method")
  forcePasswordChange Boolean @default(false) @map("force_password_change")
  emailVerified     DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  candidates        Candidate[] @relation("RecruiterCandidates")
  userGroups        User_UserGroup[]
  transitionRecords TransitionRecord[] @relation("ActingUserTransitions")
  resumeHistory     ResumeHistory[] @relation("UserResumeHistory")
  logEntries        LogEntry[] @relation("UserLogEntries")
  uploadQueue       UploadQueue[] @relation("UserUploadQueue")
  accounts          Account[]
  userPreferences   UserUIDisplayPreference[]
  
  // Indexes
  @@index([email])
  @@index([role])
  @@index([authenticationMethod])
}

model Position {
  id               String   @id @default(uuid()) @db.Uuid
  title            String
  department       String
  description      String?
  isOpen           Boolean  @default(true)
  positionLevel    String?  @map("position_level")
  customAttributes Json?    @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  candidates       Candidate[]
  
  // Indexes
  @@index([title])
  @@index([department])
  @@index([isOpen])
}

model Candidate {
  id              String   @id @default(uuid()) @db.Uuid
  name            String
  email           String   @unique
  phone           String?
  positionId      String?  @db.Uuid
  recruiterId     String?  @db.Uuid
  fitScore        Int?     @default(0)
  status          String   @default("Applied")
  applicationDate DateTime @default(now())
  parsedData      Json?
  customAttributes Json?   @default("{}")
  resumePath      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  avatarUrl       String?
  dataAiHint      String?
  
  // Relations
  position        Position? @relation(fields: [positionId], references: [id])
  recruiter       User?     @relation("RecruiterCandidates", fields: [recruiterId], references: [id])
  transitionRecords TransitionRecord[]
  jobMatches      JobMatch[]
  resumeHistory   ResumeHistory[]
  
  // Indexes
  @@index([email])
  @@index([status])
  @@index([positionId])
  @@index([recruiterId])
  @@index([applicationDate])
  @@index([fitScore])
}

model RecruitmentStage {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?
  isSystem    Boolean  @map("is_system")
  sortOrder   Int      @map("sort_order")
  
  // Indexes
  @@index([sortOrder])
  @@index([isSystem])
}

model TransitionRecord {
  id            String   @id @default(uuid()) @db.Uuid
  candidateId   String   @db.Uuid
  positionId    String?  @db.Uuid
  date          DateTime @default(now())
  stage         String
  notes         String?
  actingUserId  String?  @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  candidate     Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  actingUser    User?     @relation("ActingUserTransitions", fields: [actingUserId], references: [id])
  
  // Indexes
  @@index([candidateId])
  @@index([actingUserId])
  @@index([date])
  @@index([stage])
  @@index([positionId])
}

model LogEntry {
  id          String   @id @default(uuid()) @db.Uuid
  timestamp   DateTime @default(now())
  level       String
  message     String
  source      String?
  actingUserId String?  @db.Uuid
  details     Json?
  createdAt   DateTime @default(now())
  
  // Relations
  actingUser  User?     @relation("UserLogEntries", fields: [actingUserId], references: [id])
  
  // Indexes
  @@index([timestamp])
  @@index([level])
  @@index([source])
  @@index([actingUserId])
}

model AuditLog {
  id          String   @id @default(uuid()) @db.Uuid
  level       String
  message     String
  source      String?
  actingUserId String?  @db.Uuid
  details     Json?
  timestamp   DateTime @default(now())
  user_id     String?  @db.Uuid
  action      String?
  entity      String?
  entity_id   String?
  
  // Indexes
  @@index([timestamp])
  @@index([level])
  @@index([source])
  @@index([actingUserId])
  @@index([user_id])
}

model UserGroup {
  id            String   @id @default(uuid()) @db.Uuid
  name          String   @unique
  description   String?
  permissions   String[] @default([])
  isDefault     Boolean  @default(false) @map("is_default")
  isSystemRole  Boolean  @default(false) @map("is_system_role")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  users         User_UserGroup[]
  
  // Indexes
  @@index([isDefault])
  @@index([isSystemRole])
}

model User_UserGroup {
  userId   String   @db.Uuid
  groupId  String   @db.Uuid
  
  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group    UserGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@id([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

model SystemSetting {
  key       String   @id
  value     String?
  updatedAt DateTime @default(now())
  
  // Indexes
  @@index([updatedAt])
}

model WebhookFieldMapping {
  id          String   @id @default(uuid()) @db.Uuid
  targetPath  String   @map("target_path")
  sourcePath  String?  @map("source_path")
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Indexes
  @@index([targetPath])
}

model NotificationEvent {
  id          String   @id @default(uuid()) @db.Uuid
  eventKey    String   @unique @map("event_key")
  label       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  settings    NotificationSetting[]
  
  // Indexes
  @@index([eventKey])
}

model NotificationChannel {
  id          String   @id @default(uuid()) @db.Uuid
  channelKey  String   @unique @map("channel_key")
  label       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  settings    NotificationSetting[]
  
  // Indexes
  @@index([channelKey])
}

model NotificationSetting {
  id          String   @id @default(uuid()) @db.Uuid
  eventId     String   @db.Uuid @map("event_id")
  channelId   String   @db.Uuid @map("channel_id")
  isEnabled   Boolean  @default(false) @map("is_enabled")
  configuration Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  event       NotificationEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  channel     NotificationChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([eventId])
  @@index([channelId])
  @@index([isEnabled])
}

model CustomFieldDefinition {
  id          String   @id @default(uuid()) @db.Uuid
  modelName   String   @map("model_name")
  fieldKey    String   @map("field_key")
  label       String
  fieldType   String   @map("field_type")
  options     Json?
  isRequired  Boolean  @default(false) @map("is_required")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  
  @@unique([modelName, fieldKey])
  @@index([modelName])
  @@index([sortOrder])
}

model JobMatch {
  id                    String   @id @default(uuid()) @db.Uuid
  candidateId           String   @db.Uuid
  jobId                 String?
  jobTitle              String?  @map("job_title")
  fitScore              Int?     @map("fit_score")
  matchReasons          String[] @map("match_reasons")
  jobDescriptionSummary String?  @map("job_description_summary")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  candidate             Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([candidateId])
  @@index([jobId])
  @@index([fitScore])
}

model UploadQueue {
  id             String   @id @default(uuid()) @db.Uuid
  fileName       String   @map("file_name")
  fileSize       BigInt   @map("file_size")
  status         String
  error          String?
  errorDetails   String?  @map("error_details")
  source         String?
  uploadDate     DateTime @default(now()) @map("upload_date")
  completedDate  DateTime? @map("completed_date")
  uploadId       String?  @map("upload_id")
  createdBy      String?  @db.Uuid @map("created_by")
  updatedAt      DateTime @default(now()) @map("updated_at")
  filePath       String   @map("file_path")
  webhookPayload Json?    @map("webhook_payload")
  webhookResponse Json?   @map("webhook_response")
  
  // Relations
  createdByUser  User?     @relation("UserUploadQueue", fields: [createdBy], references: [id])
  
  // Indexes
  @@index([status])
  @@index([uploadDate])
  @@index([completedDate])
  @@index([createdBy])
  @@index([source])
  @@map("upload_queue")
}

model ResumeHistory {
  id                String   @id @default(uuid()) @db.Uuid
  candidateId       String   @db.Uuid
  filePath          String   @map("file_path")
  originalFileName  String   @map("original_file_name")
  uploadedAt        DateTime @default(now()) @map("uploaded_at")
  uploadedByUserId  String?  @db.Uuid @map("uploaded_by_user_id")
  uploadedByUserName String? @map("uploaded_by_user_name")
  
  // Relations
  candidate         Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  uploadedByUser    User?     @relation("UserResumeHistory", fields: [uploadedByUserId], references: [id])
  
  // Indexes
  @@index([candidateId])
  @@index([uploadedAt])
  @@index([uploadedByUserId])
}

model UserUIDisplayPreference {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @db.Uuid @map("userId")
  modelType     String   @map("model_type")
  attributeKey  String   @map("attribute_key")
  uiPreference  String   @map("ui_preference")
  customNote    String?  @map("custom_note")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId])
  @@index([modelType])
  @@index([attributeKey])
  @@unique([userId, modelType, attributeKey])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model DataModel {
  id          String   @id @default(uuid())
  name        String
  modelType   String
  description String?
  schema      Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
