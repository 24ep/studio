// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id                String   @id @default(cuid())
  name              String
  email             String   @unique
  phone             String?
  positionId        String
  position          Position @relation(fields: [positionId], references: [id], onDelete: Restrict) // Restrict delete if candidates exist
  fitScore          Int
  status            String // Corresponds to CandidateStatus type in lib/types.ts
  applicationDate   DateTime @default(now())
  lastUpdateDate    DateTime @updatedAt // Will be managed by Prisma
  parsedData        Json // Storing as JSON, maps to ParsedResumeData type
  resumePath        String? // Path/key of the resume file in MinIO
  
  transitionHistory TransitionRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Position {
  id                String      @id @default(cuid())
  title             String
  department        String?
  description       String?
  isOpen            Boolean     @default(true)
  candidates        Candidate[]
  customAttributes  Json?       @default("{}") // To store values for custom fields

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransitionRecord {
  id          String   @id @default(cuid())
  date        DateTime
  stage       String // Corresponds to CandidateStatus type in lib/types.ts
  notes       String?
  
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade) // Cascade delete if candidate is deleted

  createdAt DateTime @default(now())
}

enum ModelName {
  Candidate
  Position
}

enum FieldType {
  TEXT
  TEXTAREA
  NUMBER
  DATE
  BOOLEAN
  SELECT
  MULTISELECT
}

// Defines custom fields that can be added to models like Candidate or Position
model CustomFieldDefinition {
  id            String    @id @default(cuid())
  model         ModelName // e.g., Candidate or Position
  name          String // The programmatic name, e.g., "yearsOfExperience"
  label         String // The human-readable label, e.g., "Years of Experience"
  type          FieldType
  options       String[] // For SELECT or MULTISELECT types
  placeholder   String?
  defaultValue  String?
  isRequired    Boolean   @default(false)
  isFilterable  Boolean   @default(false) // Can be used in table filters
  isSystemField Boolean   @default(false) // True for core fields like 'name', 'email'
  order         Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([model, name], name: "model_name")
}

// Models required for NextAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("Recruiter")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
