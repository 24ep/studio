// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  phone             String?
  avatarUrl         String?
  dataAiHint        String?

  positionId        String?
  position          Position? @relation(fields: [positionId], references: [id], onDelete: SetNull)
  
  recruiterId       String?
  recruiter         User?     @relation("RecruitedCandidates", fields: [recruiterId], references: [id], onDelete: SetNull)

  fitScore          Int?
  status            String
  applicationDate   DateTime  @default(now())
  
  parsedData        Json?     
  resumePath        String?
  custom_attributes Json?     @default("{}")

  transitionHistory TransitionRecord[]
  resumeHistory     ResumeHistory[]
  jobMatches        CandidateJobMatch[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Position {
  id               String      @id @default(uuid())
  title            String
  department       String?
  description      String?
  isOpen           Boolean     @default(true)
  position_level   String?     
  custom_attributes Json?       @default("{}")

  candidates       Candidate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransitionRecord {
  id          String   @id @default(uuid())
  date        DateTime
  stage       String
  notes       String?
  
  candidateId String
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  positionId  String? 

  actingUserId String?
  actingUser   User?   @relation("UserTransitions", fields: [actingUserId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResumeHistory {
  id                String   @id @default(uuid())
  candidateId       String
  candidate         Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  filePath          String
  originalFileName  String
  uploadedAt        DateTime @default(now())
  uploadedByUserId  String?
  uploadedByUser    User?    @relation("UserResumeUploads", fields: [uploadedByUserId], references: [id], onDelete: SetNull)
}

model CandidateJobMatch {
  id            String   @id @default(uuid())
  candidateId   String
  candidate     Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job_id        String?
  job_title     String?
  fit_score     Int
  match_reasons String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ModelName {
  Candidate
  Position
}

enum FieldType {
  TEXT
  TEXTAREA
  NUMBER
  DATE
  BOOLEAN
  SELECT
  MULTISELECT
}

// Defines custom fields that can be added to models like Candidate or Position
model CustomFieldDefinition {
  id            String    @id @default(cuid())
  model         ModelName // e.g., Candidate or Position
  name          String // The programmatic name, e.g., "yearsOfExperience"
  label         String // The human-readable label, e.g., "Years of Experience"
  type          FieldType
  options       String[] // For SELECT or MULTISELECT types
  placeholder   String?
  defaultValue  String?
  isRequired    Boolean   @default(false)
  isFilterable  Boolean   @default(false) // Can be used in table filters
  isSystemField Boolean   @default(false) // True for core fields like 'name', 'email'
  order         Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([model, name], name: "model_name")
}

// Models required for NextAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("Recruiter")
  
  accounts      Account[]
  sessions      Session[]
  
  recruitedCandidates TransitionRecord[] @relation("UserTransitions")
  uploadedResumes     ResumeHistory[]    @relation("UserResumeUploads")
  assignedCandidates  Candidate[]        @relation("RecruitedCandidates")
  userGroups          UserGroup[]        @relation("UserUserGroups")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AuditLog {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  level        String
  message      String
  source       String?
  actingUserId String?
  details      Json?

  @@index([timestamp])
  @@index([level])
  @@index([source])
}

model RecruitmentStage {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  sortOrder   Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SystemSetting {
  key   String @id @unique
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserGroup {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  users       User[]   @relation("UserUserGroups")
  permissions String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
