pipeline {
    agent any
    
    environment {
        NODE_VERSION = '20'
        DOCKER_IMAGE = 'candidate-matching'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîç Checking out source code...'
                checkout scm
            }
        }
        
        stage('Setup Node.js') {
            steps {
                echo '‚öôÔ∏è Setting up Node.js...'
                nodejs(nodeJSInstallationName: "NodeJS-${NODE_VERSION}") {
                    sh 'node --version'
                    sh 'npm --version'
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing dependencies...'
                nodejs(nodeJSInstallationName: "NodeJS-${NODE_VERSION}") {
                    sh '''
                        npm ci
                        npx prisma generate
                    '''
                }
            }
        }
        
        stage('Run Optimizations') {
            steps {
                echo 'üöÄ Running build optimizations...'
                nodejs(nodeJSInstallationName: "NodeJS-${NODE_VERSION}") {
                    sh 'node scripts/optimize-build.js'
                }
            }
        }
        
        stage('Lint') {
            steps {
                echo 'üîç Running linting...'
                nodejs(nodeJSInstallationName: "NodeJS-${NODE_VERSION}") {
                    sh 'npm run lint'
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'üèóÔ∏è Building application...'
                nodejs(nodeJSInstallationName: "NodeJS-${NODE_VERSION}") {
                    sh 'npm run build'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Building Docker image...'
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", ".")
                }
            }
        }
        
        stage('Deploy') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                    branch 'develop'
                }
            }
            steps {
                echo 'üöÄ Deploying...'
                script {
                    sh '''
                        # Deploy using docker-compose
                        docker-compose up -d
                        
                        echo "‚úÖ Deployment completed"
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Cleaning up...'
            cleanWs()
        }
        
        success {
            echo '‚úÖ Pipeline completed successfully!'
        }
        
        failure {
            echo '‚ùå Pipeline failed!'
        }
    }
} 